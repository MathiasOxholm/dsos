// -------------------------------------
// SCSS variables
// -------------------------------------
$brand: 'hs';
$var: '--' + $brand;
$attr: 'data-' + $brand;
$root: ':root:not(.no-js)';
$inView: $brand + '-inview';
$perspective: 2000px;

// -------------------------------------
// SCSS lists
// -------------------------------------
$properties: (
  // Transition
  delay: 0ms,
  easing: var(#{$var}-ease-out),
  duration: 600ms,
  // Transition easings
  ease-in: cubic-bezier(0.4, 0, 1, 1),
  ease-out: cubic-bezier(0, 0, 0.2, 1),
  ease-in-out: cubic-bezier(0.4, 0, 0.2, 1),
  // Visibility
  opacity: 1,
  visibility: visible,
  // Transfrom
  translate-y: 0,
  translate-x: 0,
  scale: 1,
  rotate: 0deg,
  // Ratio
  ratio: 1,
  translate-ratio: 1,
  scale-ratio: 0.2,
  // Amount
  translate-x-amount: 2rem,
  translate-y-amount: 3rem,
  // Efects
  blur: 0
);

$easings: ease-in, ease-out, ease-in-out;

$sizes: (
  'sm': 0.5,
  'md': 0.75,
  'lg': 1.5,
  'xl': 2,
  '2xl': 3,
);

$speed: (
  'slow': 0.5,
  'fast': 0.75,
);

// -------------------------------------
// Mixins
// -------------------------------------
@mixin calcProperty($property, $axis, $ratio: $property, $operator: '+') {
  #{$var}-#{$property}-#{$axis}: calc(0px #{$operator} var(#{$var}-#{$property}-#{$axis}-amount) * var(#{$var}-#{$ratio}-ratio));
}

// -------------------------------------
// HumbleScroll CSS default properties
// -------------------------------------
:root {
  @each $prop, $value in $properties {
    #{$var}-#{$prop}: #{$value};
  }
}

// -------------------------------------
// Main HumbleScroll data-attribute
// -------------------------------------
#{$root} [#{$attr}] {
  > * {
    pointer-events: none;

    // Transition settings
    transition-duration: var(#{$var}-duration);
    transition-timing-function: var(#{$var}-easing);
    transition-delay: var(#{$var}-delay);
    transition-property: transform, translate, scale, rotate, opacity, visibility, filter;

    // Visibility properties
    opacity: var(#{$var}-opacity);
    visibility: var(#{$var}-visibility);

    // Transfrom properties
    translate: var(#{$var}-translate-x) var(#{$var}-translate-y);
    scale: var(#{$var}-scale);
    rotate: var(#{$var}-rotate);

    // Effects
    filter: blur(var(#{$var}-blur));
  }

  &.#{$inView} {
    > * {
      pointer-events: auto;

      // Visibility properties
      #{$var}-opacity: 1 !important;
      #{$var}-visibility: visible !important;

      // Transfrom properties
      #{$var}-translate-y: 0 !important;
      #{$var}-translate-x: 0 !important;
      #{$var}-scale: 1 !important;
      #{$var}-rotate: 0deg !important;

      // Effects
      #{$var}-blur: 0 !important;
    }
  }
}

// -------------------------------------
// Animation easing variantions
// -------------------------------------
@each $ease in $easings {
  #{$root} [#{$attr}~='#{$ease}'] > * {
    #{$var}-easing: var(#{$var}-#{$ease});
  }
}

// -------------------------------------
// Animation size variations
// -------------------------------------
@each $size, $value in $sizes {
  #{$root} [#{$attr}~='#{$size}'] > * {
    #{$var}-translate-ratio: $value;
  }
}

// -------------------------------------
// Fade animation
// -------------------------------------
#{$root} {
  // General fade
  [#{$attr}~='fade'] > * {
    #{$var}-opacity: 0;
    #{$var}-visibility: hidden;
  }
}

// -------------------------------------
// Directional animations
// -------------------------------------
#{$root} {
  // Up
  [#{$attr}~='up'] > * {
    @include calcProperty('translate', 'y');
  }

  // Down
  [#{$attr}~='down'] > * {
    @include calcProperty('translate', 'y', 'translate', '-');
  }

  // Left
  [#{$attr}~='left'] > * {
    @include calcProperty('translate', 'x');
  }

  // Right
  [#{$attr}~='right'] > * {
    @include calcProperty('translate', 'x', 'translate', '-');
  }
}

// -------------------------------------
// Zoom animations
// -------------------------------------
#{$root} {
  // Zoom in
  [#{$attr}~='zoom-in'] > * {
    #{$var}-scale: calc(1 + var(#{$var}-scale-ratio));
  }

  // Zoom out
  [#{$attr}~='zoom-out'] > * {
    #{$var}-scale: calc(1 - var(#{$var}-scale-ratio));
  }
}

// -------------------------------------
// Flip animations
// -------------------------------------
#{$root} {
  // Flip up
  [#{$attr}*='flip'] {
    > * {
      backface-visibility: hidden;
    }

    &.#{$inView} {
      > * {
        transform: perspective($perspective) rotateY(0deg) rotateX(0deg) !important;
      }
    }
  }

  [#{$attr}~='flip-up'] > * {
    transform: perspective($perspective) rotateX(-100deg);
  }

  // Flip down
  [#{$attr}~='flip-down'] > * {
    transform: perspective($perspective) rotateX(100deg);
  }

  // Flip left
  [#{$attr}~='flip-left'] > * {
    transform: perspective($perspective) rotateY(-100deg);
  }

  // Flip right
  [#{$attr}~='flip-right'] > * {
    transform: perspective($perspective) rotateY(100deg);
  }
}

// -------------------------------------
// Blur animations
// -------------------------------------
#{$root} [#{$attr}*='blur'] > * {
  #{$var}-blur: 5px;
}

// -------------------------------------
// Remove animations if prefers-reduced-motion
// -------------------------------------
@media (prefers-reduced-motion: reduce) {
  :root body [#{$attr}] > * {
    transition: none;
    opacity: 1;
    visibility: visible;
    transform: none;
    translate: none;
    rotate: none;
    scale: none;
    filter: none;
  }
}
